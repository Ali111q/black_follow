name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the latest code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub using Docker Access Token
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Your Docker Hub username
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }} # Docker Access Token (instead of password)

      # 3. Build and push Docker image to Docker Hub
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Set up SSH agent with the private key stored in GitHub secrets
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 2. Deploy to the server via SSH, pull the Docker image from Docker Hub and restart the containers
      - name: Pull Docker Image and Restart Containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Navigate to the project directory
            cd /path/to/your/project  # Replace with your project path on the server
            
            # Pull the latest Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest

            # Rebuild and restart Docker containers
            docker-compose down
            docker-compose up -d --build
          EOF

      # 3. Send Telegram success message
      - name: Send Telegram Success Message
        if: success()
        run: |
          curl -s --data "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
                   --data "text=Deployment Successful: The application has been successfully updated on the server!" \
                   "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

      # 4. Send Telegram failure message
      - name: Send Telegram Failure Message
        if: failure()
        run: |
          curl -s --data "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
                   --data "text=Deployment Failed: There was an error during deployment." \
                   "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
